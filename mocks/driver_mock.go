// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gosk "github.com/lzambarda/gosk"
	mock "github.com/stretchr/testify/mock"
)

// Driver is an autogenerated mock type for the Driver type
type Driver[T interface{}, S interface{}] struct {
	mock.Mock
}

// CancelTask provides a mock function with given fields: ctx, taskID
func (_m *Driver[T, S]) CancelTask(ctx context.Context, taskID S) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for CancelTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, S) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteTask provides a mock function with given fields: ctx, taskID
func (_m *Driver[T, S]) CompleteTask(ctx context.Context, taskID S) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for CompleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, S) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTask provides a mock function with given fields: ctx, content
func (_m *Driver[T, S]) CreateTask(ctx context.Context, content T) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTask provides a mock function with given fields: ctx, rule
func (_m *Driver[T, S]) GetTask(ctx context.Context, rule gosk.PriorityRule) (S, T, error) {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 S
	var r1 T
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, gosk.PriorityRule) (S, T, error)); ok {
		return rf(ctx, rule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gosk.PriorityRule) S); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Get(0).(S)
	}

	if rf, ok := ret.Get(1).(func(context.Context, gosk.PriorityRule) T); ok {
		r1 = rf(ctx, rule)
	} else {
		r1 = ret.Get(1).(T)
	}

	if rf, ok := ret.Get(2).(func(context.Context, gosk.PriorityRule) error); ok {
		r2 = rf(ctx, rule)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Init provides a mock function with given fields: ctx
func (_m *Driver[T, S]) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PingTask provides a mock function with given fields: ctx, taskID
func (_m *Driver[T, S]) PingTask(ctx context.Context, taskID S) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for PingTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, S) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver[T interface{}, S interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver[T, S] {
	mock := &Driver[T, S]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
